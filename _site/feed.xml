<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>13space</title>
    <description>The world is indeed a stage and we are merely players.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Mar 2017 22:09:50 +0800</pubDate>
    <lastBuildDate>Mon, 06 Mar 2017 22:09:50 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>大数据时代内容营销的迷思与融合</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tNc79ly1fcz9253zelj30zw0k6qtu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;2017年，营销将有哪些策略？
身处大数据时代，作为创造者的你，想知道如何让自己的作品有更广泛的传播？想练就一双看破「营销」迷思的火眼金睛？
你是否好奇，大数据时代营销变化发生了什么新的变化？在自媒体发展已经进入下半场的今天，内容营销能如何破局？陆易斯送你四个锦囊一个公式，用案例分析助你攻克大数据时代内容营销难关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tNc79ly1fcz92z3q4nj30n40bwtaz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;主播介绍&quot;&gt;主播介绍&lt;/h2&gt;
&lt;p&gt;陆易斯，星河互联高级投资经理，主要关注新媒体、社交、营销方向。清华大学新闻与传播学院新媒体硕士毕业，逾十年产品与运营从业经验。曾服务过的公司有搜狗、阿里巴巴、凡客、京东，其中凡客达人做到 300 万注册用户，1.5 亿的年销售业绩，曾为去哪儿产品总监。&lt;/p&gt;

&lt;h2 id=&quot;以下大纲&quot;&gt;以下大纲：&lt;/h2&gt;

&lt;h3 id=&quot;三个故事带你了解大数据时代的营销变化&quot;&gt;三个故事带你了解大数据时代的营销变化&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;瓜子二手车完成 2.5 亿美元的融资，做了怎样的营销？&lt;/li&gt;
  &lt;li&gt;百度签下李叫兽，意味着什么？&lt;/li&gt;
  &lt;li&gt;AR集五福，下一个营销爆点？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内容营销的四个锦囊--一个公式&quot;&gt;内容营销的四个锦囊 &amp;amp; 一个公式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;从单纯的用户数量到用户带来的销售价值&lt;/li&gt;
  &lt;li&gt;不止集中头部流量精准投放更有效果&lt;/li&gt;
  &lt;li&gt;要像做产品一样做内容营销&lt;/li&gt;
  &lt;li&gt;有直接收益才有直接转化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;案例分析教你-get-营销技能&quot;&gt;案例分析教你 get 营销技能&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;案例详解：产品化的原生广告如何制作？&lt;/li&gt;
  &lt;li&gt;案例详解：如何靠一张内容打天下？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;

&lt;h3 id=&quot;营销随时代发展&quot;&gt;营销随时代发展&lt;/h3&gt;

&lt;p&gt;自有商业以来，就有营销。之前做广告的方式比较固定，诞生了4A公司这样一些行业的巨头。广告在发生根本的改变，广告人也在调整。身处大数据的时代，营销有诸多变化，我的个人经历与这个行业同步，故以此为例。&lt;/p&gt;

&lt;p&gt;十几年前，我在奥美做传统广告，广告从创意部到设计部到完稿，是传统广告的流程。现在也有很多公司还是走这样一个流程，那时是主流。&lt;/p&gt;

&lt;p&gt;后来去了搜狗，做新闻搜索。在信息互联网的时代，&lt;strong&gt;当时认为互联网即信息&lt;/strong&gt;，把一些很多的信息然后聚合成搜索，搜狐是新闻门户，把传统媒体转到线上，在线上通过信息的方式来获取一些知识，这是信息互联网。在那个时候。广告其实就是说掺在信息里面。&lt;/p&gt;

&lt;p&gt;再到下个阶段，信息互联网不能满足营销，用户希望与信息互动，不仅仅是评论。电商发展起来，此时我在阿里巴巴，看到这个情况变化，&lt;strong&gt; 信息从非结构化，变为结构化。&lt;/strong&gt;原来信息是一种非结构化信息，就非结构化。非结构化什么意思？就是你说一句话，这一句话其实是一个自然语言，但是没有结构。
而例如淘宝和京东等的数据，一个商业标题，价格，产地，相当于一个表格式结构化信息。只有结构化信息，才可能快速的搜索到，才有可能去做电商，才有可能产生购买。而非结构化信息，你说一句话，很难找到哪一个品类，哪一个具体产品属性，这是很难能找到的。所以也没法去做电商。包括电商的各个环节，其实都是结构化信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;接下来电商继续发展，从PC互联网过渡移动互联网&lt;/strong&gt;，这是我在京东的时候。用户肯花时间在移动互联网上，并且可以利用碎片化时间购物。过渡到移动互联网。电商介入到移动互联网的时代。&lt;/p&gt;

&lt;p&gt;再往后，以去那儿为代表的O2O嘛，背后是产业，&lt;strong&gt;互联网跟产业深度结合&lt;/strong&gt;，从线下到线上，线上到线下这种产业深入结合。&lt;/p&gt;

&lt;p&gt;现在是移动互联网产业结合的这样的一个时期，发生了什么变化？&lt;/p&gt;

&lt;h3 id=&quot;三个故事&quot;&gt;三个故事&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;第一个故事：&lt;/strong&gt;
&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSdBJAlwibP17XqsDyNvUkIH9ibzibhvzib5JTLgm1JicPlDpDDyx2JPSUM3cg/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;
瓜子二手车去年完成了 A 轮 2.5 亿美元的融资，红杉、经纬、山信等资本会投资，瓜子二手车实时在售个人车源量超过 12 万台。去年花了 10 个亿的广告投入，才有这样的结果，竞争对手基本上花了也有五个亿的广告费。据瓜子二手车杨浩勇说今年花 10 个亿，明年也要花 10 亿。他在各个平台做广告，户外广告、视频广告、移动互联网广告，覆盖到全国二十八个省份，二百零八个城市。
10个亿的广告投入，对于中小企业来说，不可负担。2017年这种情况会越来越少。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二个故事：&lt;/strong&gt;
&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSdulbVHpCsN3GDvh5zVSoshLaJyecXXPDRRHWw4Nu4oeAsGYTseogH2A/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;百度签下李叫兽。至少可以从这个事件中读懂三点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;百度不打算只做搜索。
曾经，只要把搜索这部分抓住，广告就成了90%。今年及今后几年，百度自己都不打算只靠搜索来做营销，搜索将只是广告中的一部分。&lt;/li&gt;
  &lt;li&gt;找自媒体创造新的对话方式。
签下自媒体，即承认自媒体的力量。&lt;/li&gt;
  &lt;li&gt;人工智能方法预期。
目前人工智能没有几十亿的规模产品，百度认为在下个阶段，人工智能大数据的方式是科学营销。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;第三个故事：&lt;/strong&gt;
&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSd1ic5MEUSuFyoibmxmE8V9j0bDwasq4G9j0qevbbpFPLrZXHsNMicCq5BA/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AR集五福和藏红包的营销。移动互联网只是设备，有很多新的玩法，把消费者的注意力集中进入到营销场景去，让消费者更愿意参与进来。QQ也马上跟进了这件事情，就可能成为一种营销手段。&lt;/p&gt;

&lt;p&gt;这些故事是说，&lt;strong&gt;仅靠移动互联网营销的时代已经过去&lt;/strong&gt;，接下来是通过移动互联网做些什么，不只是买流量。百度李彦宏说，移动互联网时代已经结束；未来机会在人工智能。李开复说移动互联网红利消失；谷歌说移动互联网真的到头了。2016 年已经是存量市场，2017 年仍然是个存量市场，所以在这样的时代里面，如果还是在移动互联网的自媒体方向发展的话，现有的移动互联网会加速淘汰、兼并，如果你的流量、销售还没有跑出来的话，很可能被淘汰或者被兼并。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSdxicQGvccRT5VESJTU9z1NbRXpLCZJ4YIln2pZo2yRlNIM4fnhwxjm4Q/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;接下来这一年，你将怎么营销？创意和渠道，营销怎么选？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大家如何做预算？大家每个人心中都应该有一些想法。我给大家举一个例子，这个例子非常抽象，大家可以对比自己做的案例。假设营销预算一百万的情况下，方案 A，创意 70 万，渠道 30 万；方案 B，创意 30 万，渠道 70 万，大家会选哪个？
非常两难的选择，这些创意好吗？渠道便宜吗？方案 A 和方案 B 在这里没有一个明确的答案，但是大家今年底做预算的时候，肯定面临这样的选择，到底我怎么去规划我这一百万的营销预算，预期效果怎么打到？&lt;/p&gt;

&lt;p&gt;“百年润发”广告，右边是去年的金铜奖，在内容营销这块还是有一定的声望的。但是我们看不到，因为渠道仍然是传统的电视。今年会面临这样一个情况，我们靠一个内容打天下，不一定是最好的内容，而是大家都能看到的内容。&lt;/p&gt;

&lt;h3 id=&quot;四个锦囊和一个公式&quot;&gt;四个锦囊和一个公式&lt;/h3&gt;

&lt;p&gt;到了今天这样一个时间点，我们必须要对内容营销有一个比较清醒的判断和理解，这四个方向是有一定值得思考的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 锦囊一：从单纯的用户数量到用户带来销售价值。&lt;/strong&gt;
&lt;strong&gt;锦囊二：不止集中投放头部流量，精准的用户投放更有效果。&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;锦囊三：像做产品一样，真正让用户得到点击。&lt;/strong&gt;
&lt;strong&gt;锦囊四：有直接收益才有直接转化。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;营销收入公式如下：
&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSdH89QcYibGLnAatWcjPoq8JbwzsjQP5YI9B0PFhW6azq7qJibkn8EcHMA/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;精准人群。&lt;/strong&gt;
譬如有一个 APP，他会把一些手机的 ID 保留下来，这些 ID 其实会关联很多的社交媒体，社交媒体在这个层面上，他可能会判断一个用户的整体行为，而不是根据上下文推送，这个东西还是没有触达到用户的本质。在这里面，他其实是可以得到用户的整体行为，之后在所有的媒体上面，可能给他推同样的广告。他可能去看一个新闻，我们判断这个用户，经常去浏览化妆品网站，甚至还在微博发了一条化妆品的评论，我们可以立刻判断出用户最近对化妆品很有兴趣，有可能在看新闻的时候，就给他推送相关化妆品的广告。我们看到有一些创意，也是针对千人千面所做的。&lt;/p&gt;

&lt;p&gt;相似人群扩展，现在不能覆盖到所有的用户，因为太贵了，所以你要覆盖一部分人群，这样一部分人群我们是要通过一些计算方法去计算出来。比如说王老吉的购买者是什么样的规律，他说容易上火，这事儿也有点抽象。容易上火是工作压力大，比如说什么情况下工作压力大，他们会使用什么样的 APP，大家可以想，这个我没有一个明确的答案。上火，比如说看球容易上火；玩游戏的时候，大家也比较容易上火；比如说餐饮，可能真的比较油腻的情况，在这里面，我们找到什么样的用户会阅读这样相关的 APP，然后我们对他进行精准的曝光。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;曝光频次&lt;/strong&gt;
很多人还认为，广告是一个视频广告的前贴片、后贴片，这个理解已经不是移动互联网思维。移动互联网现在有这么多的展示方式，例如信息流，大家阅读微信可以看到，不止微信，所有跟内容有关系的，都会在中间插播一些信息流，广告可以获得一些位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/P7zzkBGoztHHLnOJ9NtLIQQjatxvxrSdsibCNEmjfdNZ5JiaVL3WsVGknd9h8BY7oFnVT4wiaoXoSevSlTrUribP8Q/0?wx_fmt=jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户，你可以触达到很多用户，还有一个比较巧的办法，就是让用户有更多次打开的机会。我举一个例子，酷划锁屏，锁屏是在手机静止的时候，会出现锁屏，这里面根据用户不同的场景，会推送不同的广告，比如说早晨会推送星巴克的广告，中午的时候有可能推送大众点评的广告，晚上的时候，有可能推送的是 Uber 的广告。在这里面，原本几次的打开，可能就会变成十几次的打开，给用户创造很多打开的机会，我想不仅仅是锁屏这一件事情。&lt;/p&gt;

&lt;p&gt;还有插屏广告，开屏广告更明显，在打开原生 APP 的时候，可以看到在里面会有一些其他的广告展示出来。最后，推荐墙广告，可以让用户直接下载。我们想说的是不断地去创造一些让用户点击的可能性。&lt;/p&gt;

&lt;p&gt;跨屏，既然让用户更多的打开，不如跨屏。我看过一个项目，讲音频跨屏，跟广告电台和个人电台去合作，他们很需要互动，这个互动原来可能是电话点歌这种比较传统的方式。而现在电台会跟 APP 合作，他们会在 APP 上抢红包、有奖问答等，你可以通过语音交流，APP 会自动判断出来，这样的方式会和电台有一个比较深度的合作。其实在某种程度上，我们认为是跨屏的力量。&lt;/p&gt;

&lt;p&gt;OTT（智能电视），你打开智能电视的各个环节跟你的手机深度绑定，为什么可以绑定？你可能使用手机跟 OTT 连着同样一个 WIFI，他会读到你的使用行为，就会判断，在什么时间点可能需要什么，通过手机看化妆品内容的时候，可能会在智能电视里面给你推送相关的化妆品广告。户外跨屏，这个事情也很有意思，户外也会跟用户的行为能绑定起来，比如说他会探测你在回家的路上，你在手机上会收到跟电梯广告一模一样的广告，比如给你发一个红包之类的，你可以跟他频繁的互动或者下载他的 APP，所以跨屏也是一个点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 点击：营销是内容的延伸&lt;/strong&gt;
我们有更多的曝光频次，更多的精准人群，如何创造不“骗点击”的点击？
2017 年，一定要重视视频，我跟视频广告的从业者交流，明年还会再加大视频广告的力度，而且会增加一些中贴片，在电影、电视的精彩处或者一些悬念的部分会放一些广告，甚至会运用人工智能手段识别出来，到底用户什么时候会产生更多的悬念，在这里面会插入一些广告，所以这点一定要重视。
案例1：
 一条视频是一家基于移动互联网和微信的生活视频服务品牌，旗下有生活、潮流、文艺等各类栏目，如《隐世小店》、《城中潮客》、《男士型格》、《中国建筑新浪潮》、《达人厨房》、《美谈Beauty Talk》等。 2016年7月获得B轮华人文化1亿美元融资
-杭州二更网络是一家新媒体视频提供商，涵盖二更视频、二更食堂等，选题涉及人文、艺术、潮流、生活、食尚各个层面。 2016年初获得5000万投资。
通过一个生活方式的视频，给用户一个非常精致的、没有想到过的生活方式，他给用户一些启发，尤其像二更背后都是广告。有些广告，甚至背板打出来就是这个产品的 LOGO，在这里面，用户自然而然的通过生活方式去接受了这样的广告，从而深入到用户人心，所以这种程度，就是我刚才所说的内容即视频广告。我们现在认为内容营销和媒介、广告，这块都是不能分开的，做到这点，才有可能直接触达用户，让用户点击。&lt;/p&gt;

&lt;p&gt;案例2：
现在好多自媒体做的软文，你已经看不出来是给哪个品牌做内容了。如果把整个自媒体变成相关的，比较软的植入，效果要更好一些，大家可以去尝试。&lt;/p&gt;

&lt;p&gt;产品化的原生广告，做一个产品，其实就是一个广告，什么意思？举个例子，比如说拉萨邮寄，在这里面还有另外一个库，拉萨和普吉岛一些可以打折的酒店，我们把这两个库给它深刻的进行匹配，我作为内部创业者，我也做过这么一件事情，其实就是让这些旅游达人去写一些各个旅游地方的奇妙感受，在这里面，机器自动匹配比较精准的内容，这样操作，实际上广告跟内容形成一体，比如说他提到了一个酒店，立马会有酒店相关的营销，我们认为这个叫原生广告，在这里面，产品和营销也是不能分开的。&lt;/p&gt;

&lt;p&gt;案例3：营销即内容
这个是美柚，把美柚的内容变成其他媒体的一部分，比如说你有一个女性的 APP，在这里面，美柚会提供一个相关的内容，让用户认为这个东西对我有用，他会收藏起来。&lt;/p&gt;

&lt;p&gt;案例4：营销是内容的延伸
VISA，里面增加了延伸阅读的东西，这里面会植入很多的广告，这个人是在讲理财，VISA 会植入相关的跟理财有关系的新闻，他有一个新闻站，点击新闻站之后，有很多关于理财的窍门，所有都是由 VISA 来提供的，大家可能跟新闻内容深度绑定的时候，也可以采用延伸阅读的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;转化&lt;/strong&gt;
转化通过什么方法来做呢？
激励，可以看到积分墙、道具兑换、完成任务后的奖励，有的是你必须下载某一个 APP，你才能完成这一关，这个是让用户产生转化的步骤。流米是通过给用户发红包的方式，让用户充流量，这里面每个用户都可以获得转化来形成比较正向的循环。&lt;/p&gt;

&lt;p&gt;今年的双十一，网红张大奕在前十分钟，销售两三千万，最终排名进入前十，排名其他前十的是优衣库、ONLY 等，她作为网红，已经进入亿元区了。易观的同行也在说，现在的自媒体不是不赚钱，而是有的自媒体赚的非常多，大家可以去研究一下张大奕，像今年有三个通过自媒体、通过粉丝支持的方式进了亿元俱乐部的——张大奕、ANNA、钱夫人，可以进入双十一的前十，这是非常有意思的趋势。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;2017 年，存量市场竞争异常激烈，不止用户数量，我们更要注重用户带来的价值，不要只盯着一个内容创意而不顾其他，我们认为用户、内容和媒介的边界越来越模糊，不只靠渠道也不只靠创意，用想象力将渠道和创意结合起来，能让用户真能接受，是现在广告比较核心的理念，运用好综合的打法才有可能获胜，2017 年就看各位的了。&lt;/p&gt;

&lt;h2 id=&quot;qna&quot;&gt;QNA&lt;/h2&gt;

&lt;h3 id=&quot;问题1&quot;&gt;问题1：&lt;/h3&gt;
&lt;p&gt;最近看《鬼吹灯精绝古城》，中间有一个广告时间，就是让里边的演员来演各种，推荐什么探探，必胜客，一些游戏，僵尸让里边的演员来演这个小广告，当然我觉得今天听完李老师的我觉得他们的广告让用户觉得会觉得期待这个广告的来临，一点没有觉得对这个广告反感，其实我想问一下老师，在这种让用户期待的广告的时候，我们可以怎么去设计，可以从什么地方去下手，或者怎么去学习做这种让用户不会反感，反而产生期待感的广告出来？
**答：这是植入广告，影视、网剧的植入，关键还是好玩，观众期待是因为这些演员好玩，演员能把这些东西演绎出的有意思，与之前一条二更的例子，和旅游的例子一样，旅游达人的游记有意思、好玩，心里形成模型，认为在看娱乐节目。广告弄的很正经，明显的推销，观众心里会感觉到跟之前娱乐的感觉不一样。所以，内容首先做的好，好玩吸引观众。同时，做得平滑，演员还是那些演员，不突兀，过渡和衔接都很好，甚至你还有点期待，期待的意思就是说有意思，有意思才期待。
** &lt;/p&gt;

&lt;h3 id=&quot;问题2&quot;&gt;问题2：&lt;/h3&gt;
&lt;p&gt;在洞悉人性的基础上提供的产品和服务是大众需要的，网络小说洞悉人性，受众特别广，这对营销有什么启发？
&lt;strong&gt;答：网络小说是用户分层的典型。部分网络小说消极，满足用户的不劳而获想法。也同样用鬼吹灯这样的作品。根据用户不同，挖掘需求，写成小说。又能对比较精英讲故事，又想对大众讲故事，这样的故事也有，但是不多。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（考虑文章篇幅，视频中提到的部分案例及问答未完全收录，欢迎下载开智学堂APP观看直播）&lt;/p&gt;

&lt;h2 id=&quot;投票&quot;&gt;投票&lt;/h2&gt;
&lt;p&gt;看完这篇文章，你觉得：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2017年营销，创意和渠道要结合。&lt;/li&gt;
  &lt;li&gt;做好玩的内容，更容易让受众接受。&lt;/li&gt;
  &lt;li&gt;不知不觉，中了广告的毒。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 25 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/14879419311452/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/14879419311452/</guid>
        
        <category>machine learning</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Use Vim as a Python IDE</title>
        <description>&lt;p&gt;I love vim and often use it to write Python code. Here are some useful plugins and tools for building a delightful vim python environment, escpecially for Vim8:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/vim-python-ide-screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, tmux is also one of my favourite tools in terminal.&lt;/p&gt;

&lt;h3 id=&quot;syntax-checking&quot;&gt;Syntax Checking&lt;/h3&gt;

&lt;p&gt;If you use Vim8, &lt;a href=&quot;https://github.com/w0rp/ale&quot;&gt;w0rp/ale&lt;/a&gt; is a better option than syntastic, for it utilizes the async feature in Vim8, you will never get stuck due to the syntax checking. It’s similar to flycheck in emacs, which allows you to lint while you type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/w0rp/ale/blob/master/img/example.gif?raw=true&quot; alt=&quot;&quot; /&gt;
(taken from ale)&lt;/p&gt;

&lt;h3 id=&quot;code-formatter&quot;&gt;Code Formatter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/yapf&quot;&gt;google/yapf&lt;/a&gt; can be used to format python code. Make a key mapping as bellow, then you can format your python code via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt; =&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; python nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;LocalLeader&lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;$&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;yapf&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also take a look at &lt;a href=&quot;https://github.com/Chiel92/vim-autoformat&quot;&gt;Chiel92/vim-autoformat&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sort-import&quot;&gt;Sort Import&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/timothycrosley/isort&quot;&gt;timothycrosley/isort&lt;/a&gt; helps you sort imports alphabetically, and automatically separated into sections.  For example, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;i&lt;/code&gt; to run isort on your current python file:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; python nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;LocalLeader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;isort %&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or you can use its vim plugin: &lt;a href=&quot;https://github.com/fisadev/vim-isort#installation&quot;&gt;fisadev/vim-isort&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;auto-completion&quot;&gt;Auto Completion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;Valloric/YouCompleteMe&lt;/a&gt; is a good way to provide code auto completion. If you think YCM is too huge to give a try, &lt;a href=&quot;https://github.com/davidhalter/jedi-vim&quot;&gt;jedi-vim&lt;/a&gt; is an alternative. They all use &lt;a href=&quot;https://github.com/davidhalter/jedi&quot;&gt;jedi&lt;/a&gt; as their backend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png&quot; alt=&quot;&quot; /&gt;
(taken from jedi-vim)&lt;/p&gt;

&lt;p&gt;If use neovim, you can also try &lt;a href=&quot;https://github.com/Shougo/deoplete.nvim&quot;&gt;Shougo/deoplete.nvim&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;quick-run&quot;&gt;Quick Run&lt;/h3&gt;

&lt;p&gt;If use Vim8, you can execute python file asynchronously by &lt;a href=&quot;https://github.com/skywind3000/asyncrun.vim&quot;&gt;skywind3000/asyncrun.vim&lt;/a&gt; and output automatically the result to the quickfix window like this:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Quick run via &amp;lt;F5&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;compile_and_run&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

augroup SPACEVIM_ASYNCRUN
    autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Automatically open the quickfix window&lt;/span&gt;
    autocmd &lt;span class=&quot;nb&quot;&gt;User&lt;/span&gt; AsyncRunStart &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; asyncrun#quickfix_toggle&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
augroup END

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:compile_and_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    exec &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;
        exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! gcc % -o %&amp;lt;; time ./%&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cpp'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! g++ -std=c++11 % -o %&amp;lt;; time ./%&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! javac %; time java %&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sh'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! time bash %&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'python'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! time python %&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For neovim, &lt;a href=&quot;https://github.com/neomake/neomake&quot;&gt;neomake/neomake&lt;/a&gt; is worthy of trying. Here is the description from neomake’s README:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is intended to replace the built-in :make command and provides functionality similar to plugins like syntastic and dispatch.vim. It is primarily used to run code linters and compilers from within Vim, but can be used to run any program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another approach is to use &lt;strong&gt;&lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;TMUX&lt;/a&gt;&lt;/strong&gt;. The idea is simple: it can split your terminal screen into two. Basically, you will have one side of your terminal using Vim and the other side will be where you run your scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/vim-python-ide-tmux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enhance-the-default-python-syntax-highlighting&quot;&gt;Enhance the default python syntax highlighting&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/python-mode/python-mode&quot;&gt;python-mode/python-mode&lt;/a&gt; provides a more precise python syntax highlighting than the defaults. For example, you can add a highlighting for &lt;code class=&quot;highlighter-rouge&quot;&gt;pythonSelf&lt;/code&gt; .&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; pythonSelf  ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;68&lt;/span&gt;  guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#5f87d7&lt;/span&gt; cterm&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more customized python syntax highlightings, please see &lt;a href=&quot;https://github.com/liuchengxu/space-vim/blob/master/layers/%2Blang/python/config.vim#L52-L72&quot;&gt;space-vim: python Layer&lt;/a&gt; and &lt;em&gt;syntax/python.vim&lt;/em&gt; in &lt;a href=&quot;https://github.com/python-mode/python-mode/blob/develop/syntax/python.vim&quot;&gt;python-mode/python-mode&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Actually, python-mode contains tons of stuff to develop python applications in Vim, e.g., static analysis, completion, documentation, and more. (But personally, I prefer to obtain the functionalities by some other better plugins.)&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;There are also some neccessary general programming plugins, e.g., &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;scrooloose/nerdcommenter&lt;/a&gt; for convenient commenter, &lt;a href=&quot;https://github.com/Yggdroot/indentLine&quot;&gt;Yggdroot/indentLine&lt;/a&gt; or &lt;a href=&quot;https://github.com/nathanaelkane/vim-indent-guides&quot;&gt;nathanaelkane/vim-indent-guides&lt;/a&gt; for visually displaying indent levels in Vim, &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;  and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt; for fuzzy file searching, etc.&lt;/p&gt;

&lt;p&gt;Although vim is great and many plugins are productive, IDE is still my first choice when it comes to refactoring code and debugging:). Some useful links for debugging python:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1623039/python-debugging-tips&quot;&gt;python-debugging-tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://keflavich.github.io/blog/my-python-ipython-vim-debugging-workflow.html&quot;&gt;my-python-ipython-vim-debugging-workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For detailed vim configuration, please see &lt;strong&gt;&lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;&lt;/strong&gt;, enable ycmd, syntax-checking, python, programming Layer , then you could get a nice vim environment for python like the screenshot. Hope it helpful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/use-vim-as-a-python-ide/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/use-vim-as-a-python-ide/</guid>
        
        <category>tools</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Switch from spacemacs to vim painlessly</title>
        <description>&lt;p&gt;It’s obvious that I am both a vimmer and spacemacs user (not a spacemacs hacker, yet). I was really amazed by spacemacs’ beautiful GUI and mnemonic keybindings when using it at the first time. Now, I oftern use spacemacs in GUI environment. However, I still prefer vim in terminal, for it’s much faster than emacs, especially when opening some small files.&lt;/p&gt;

&lt;p&gt;Vim is definitely my first choice in terminal, but spacemacs’ beautiful appearance is utterly appealing and its efficient keybindings indeed contribute to help me remember much more key mappings in vim. Hence I write a vim colorscheme &lt;a href=&quot;https://github.com/liuchengxu/space-vim-dark&quot;&gt;space-vim-dark&lt;/a&gt; based on &lt;a href=&quot;https://github.com/nashamri/spacemacs-theme&quot;&gt;spacemacs-theme&lt;/a&gt;. What’s more, I reconfigure my vim configuration based on spacemacs’ priciples, which is &lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot3.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Beautiful interface.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mnenomic keybindings.
  commands have mnemonic prefixes like &lt;code class=&quot;highlighter-rouge&quot;&gt;SPC b&lt;/code&gt; for all the buffer commands.&lt;/p&gt;

    &lt;p&gt;Meanwhile, the whole key bindings have been well adapted for vim for the lack of great plugins similar to which-key in emacs. Most key bindings are limited to no more than two keystrokes without counting &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;&lt;/code&gt; in, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;SPC x d&lt;/code&gt; to delete trailing whitespaces.&lt;/p&gt;

    &lt;p&gt;For different language layers, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; as default in space-vim, can be seen as the major-mode prefix in spacemacs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flexible.&lt;/p&gt;

    &lt;p&gt;I use the similar layer concept to organize the vim configuraitons.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; You can enable the existing layers in space-vim and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; exclude the partial plugins in a certain layer.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; The command Layer and Exlcude are vaild in the function Layers().&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; Layers&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Default layers, recommended!&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'fzf'&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'unite'&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'better-defaults'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Put your private plugins here, e.g., change the colorscheme.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; UserInit&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Space has been set as the default leader key,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Comma has been set at the default localleader key.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; If you want to change it, uncomment and set it here.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let g:spacevim_leader = &quot;your leader key&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let g:spacevim_localleader = 'your localleader key'&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Install private plugins&lt;/span&gt;
    Plug &lt;span class=&quot;s1&quot;&gt;'morhetz/gruvbox'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Override the existing configurations and add extras here.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; UserConfig&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; color gruvbox&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I shamelessly steal many elements from &lt;a href=&quot;https://github.com/junegunn/vim-plug/blob/master/plug.vim&quot;&gt;plug.vim&lt;/a&gt; in &lt;a href=&quot;https://github.com/liuchengxu/space-vim/blob/master/core/autoload/core_config.vim&quot;&gt;core_config.vim&lt;/a&gt;, for vim-plug is truely inviting because of its simplicity and clear design. I wish space-vim could be concise as well.&lt;/p&gt;

&lt;p&gt;For more details, please see &lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;. Hope you like it too.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/space-vim/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/space-vim/</guid>
        
        <category>tools</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Perceptron</title>
        <description>&lt;p&gt;This post will mainly analysis the perceptron alrorithm introcuded in the book &lt;em&gt;Python Machine Leerning&lt;/em&gt;, whose github address is &lt;a href=&quot;https://github.com/rasbt/python-machine-learning-book&quot;&gt;here&lt;/a&gt;. Actually, I will pay much attention to the code analysis step by step, not the theoretical introduction, which is easy to comprehend.&lt;/p&gt;

&lt;p&gt;The perceptron algorithm can be summarized by the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize the weights to 0 or a small random numbers.&lt;/li&gt;
  &lt;li&gt;For each training sample $x^{(i)}$ perform the following steps:
    &lt;ol&gt;
      &lt;li&gt;Compute the output value $\hat{y}$.&lt;/li&gt;
      &lt;li&gt;Update the weights.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/images/02_04.png?raw=true&quot; alt=&quot;perceptron&quot; /&gt;
(图片来自 python-machine-learning)&lt;/p&gt;

&lt;p&gt;感知器算法步骤大致如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将权重初始化为 0 或一个很小的随机数。&lt;/li&gt;
  &lt;li&gt;对于每个训练样本 $x^{(i)}$ 执行下列操作：
    &lt;ol&gt;
      &lt;li&gt;计算输出值 $\hat{y}$ 。&lt;/li&gt;
      &lt;li&gt;更新权重。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里的输出值, 就是由我们预先定义的单位阶跃函数 (unit step function) 所预测得出的类别标签。权重向量 $\mathbf{w}$ 中的每一个权重 $w_j$ 的更新公式为：&lt;/p&gt;

&lt;p&gt;\begin{equation}
w_j := w_j + \Delta w_j
\end{equation}&lt;/p&gt;

&lt;p&gt;$\Delta w_j$ 被用来更新权重 $w_j$ , 其计算公式如下：&lt;/p&gt;

&lt;p&gt;\begin{equation}
\Delta w_j = \eta \left(y^{(i)} - \hat{y}^{(i)}\right)x_j^{(i)}
\end{equation}&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Perceptron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Perceptron classifier.

    Parameters
    ----------
    eta: float
        Learning rate (between 0.0 and 1.0)
    n_iter: int
        Passes over the training dataset.
    Attributes
    ----------
    w_: 1d-array
        Weights after fitting.
    errors_: list
        Number of misclassifications in every epoch.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Fit training data.

        Parameters
        ----------
        X: {array-like}, shape = [n_samples, n_features]
            Training vectors, where n_samples is the number of samples
            and n_features is the number of features.
        y: array-like, shape = [n_samples]
            Target values

        Returns
        -------
        self: object
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# 公式 2 : update = \Delta \mathbf{w}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Calculate net input&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Return class label after unit step&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/perceptron/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/perceptron/</guid>
        
        <category>machine learning</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Third Maximum Number</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/third-maximum-number/&quot;&gt;414. Third Maximum Number&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).&lt;/p&gt;

&lt;p&gt;The following solutions are all stealed from &lt;a href=&quot;https://discuss.leetcode.com/topic/63903/short-easy-c-using-set&quot;&gt;A short easy cpp solution using set&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;cpp version:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the same idea in java:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TreeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the cpp and java version above is very similar. A person in the discussion presented a question that std::set usually uses red-black tree, so wouldn’t the solution be &lt;em&gt;nlogn&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The answer to the presented problem is since we only have 3 elements, insert/delete is a constant time operation. Don’t stick to O(&lt;em&gt;nlogn&lt;/em&gt;) concept. What’s more, if dive into the problem, we can find the following content about insert operation complexity from &lt;a href=&quot;http://www.cplusplus.com/reference/set/set/insert/&quot;&gt;cplusplus.com&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a single element is inserted, logarithmic in size in general, but amortized constant if a hint is given and the position given is the optimal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see the same idea using python:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bisect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am not an expert in python , yet, so the python solution is not so clear and understandable at my first glance. Actually, the reason is that I didn’t know &lt;code class=&quot;highlighter-rouge&quot;&gt;bisect.insort()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The idea could also be used to get the top k items in a large array, whereas you need pay more attention to a certain case:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Input: [2, 2, 3, 1]&lt;/p&gt;

  &lt;p&gt;Output: 1&lt;/p&gt;

  &lt;p&gt;Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If numbers with the same value can not be considered as the same one, the result is unexpected. I did make a mistake here in the past. In Bayesian Personalized Ranking algorithm, I need to obtain the top k items from a list. At that time I used the similar solution, though the final result seemingly looked normal, it was indeed wrong.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/leetcode-414/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/leetcode-414/</guid>
        
        <category>leetcode</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
