<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>13space</title>
    <description>The world is indeed a stage and we are merely players.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 22 Nov 2017 19:12:24 +0800</pubDate>
    <lastBuildDate>Wed, 22 Nov 2017 19:12:24 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>复杂系统及心智</title>
        <description>&lt;p&gt;2017-05-07-complex system and mind&lt;/p&gt;

&lt;h2 id=&quot;复杂性及涌现&quot;&gt;复杂性及涌现&lt;/h2&gt;

&lt;h3 id=&quot;现代经验科学的根基-还原论&quot;&gt;现代经验科学的根基 ——「还原论」&lt;/h3&gt;

&lt;p&gt;自从人类成为智能生物，产生意识后，便与自然分离，眼前面对的是一个复杂多变的世界。这迫使人们为了生存，必须具有「消除不确定性」的能力。&lt;/p&gt;

&lt;p&gt;这方面最早的尝试是巫术和宗教。巫术和宗教在消除人类群体内部不确定上是非常成功的，能够藉由对自然、神灵的共同认同将部落成员组织成一个整体，构建自己的文化乃至文明。但是在另一方面，即&lt;strong&gt;消除外界不确定性&lt;/strong&gt;上，却是喜忧参半：巫术指引成功的概率最高也就是一半，信仰的「神灵」也不会总是指引它的子民。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;media/14930127098901/14934260783390.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;
    所以，人们迫切需要自己掌握世界的规律来决定自己的命运。这些被掌握的规律，即是知识。
    
    
|  | 巫术/宗教 | 哲学 | 科学 |
| --- | --- | --- | --- |
| 对象 | 人格自然/超验对象 | 永恒、无限、理想对象| 具体、有限、现实存在|
| 方法 | 交感/信仰 | 理性 | 理性 &amp;amp; 实证 |

    
&lt;p&gt;
    然而要掌握知识，首先要确信世界的**有序性**的一面，否则根本就不会有这方面的努力。在人类进入文明史后，对这个问题的不同回答就造就了不同文明传统：其中一种典型的是印度文明，认为世界的本质是「无常」和「苦」的，对探究现象世界没有兴趣，因而发展出了异常丰富的精神修炼和宗教传统；（或者如中国传统认为那张，道是不可言说的，世界万物是一个整体）相反另一种的典型则是古希腊，他们认为世界的命运是定数，是可知的、有规律的，现象世界在本质层面是由简洁的理念完美世界衍生而来的。
    
- 毕达哥拉斯：万物皆数
- 逻各斯主义：世界是一团按照一定比例充分燃烧的活火
- 柏拉图哲学：世界是完美的理念的影子
    
&lt;p&gt;
    总之，地处诸多文明交汇的古希腊，不仅成为了人类最早理性文明的中心，并且结合交流产生经验传统，为科学诞生奠定了基石。
    
&lt;p&gt;


综上所述，科学正是基于一组这样的假设：

   - **决定论**：存在一个外在独立的世界，它遵循确定性规律。
   - **可知论**：人们可以通过对世界及存在物进行思辨和观察掌握这些规律。
   - **还原论**：世界及世界的存在的各种现象，都可以通过研究恰当分割所得到的部分，进而得到整体本身的性质和规律。

**这也就是线性思维的体现：整体 = 部分之和**

&lt;p&gt;
    简而言之，这组假设威力巨大，是科学何以产生的根本原因。整个西方理性文明，或者说整个现代人类文明都是以此建立起来的。而没有科学，就不可能有蒸汽机和工业革命、电的运用和电力革命，和如今方兴未艾的信息革命和智能革命。
    
&lt;p&gt;
    然而同时，随着现代科学的不断深化和发展，这组假设也越来越遭到质疑，并被重新认识：其中第一，第二假设被20世纪初的相对论和量子力学打破了，人们认识到并不存在外部绝对时空，并且主体的观测和行为会影响到世界本身；而第三个假设，即还原论也被20世纪70年代所发展的非线性科学与复杂性科学所挑战。

- 相对论：
- 量子力学：
- 复杂性科学：
    

### 复杂性的诞生——非线性思维

在复杂系统科学诞生之前，人们已经习惯了这样的世界观：即世界由自然界／生物／心智／社会组成，但归根结底，所有的社会组织都可以还原为个体，个体的精神和意识都可以还原为生物，而生物的一切又都可以还原为化学和物理，物理则是由不随着人们主观意志转移的某种基质组成：在古希腊是想象中的原子，现在则是基本粒子，如在标准模型中的轻子、夸克和规范子。
    

可以说，基于还原论的经典物理学和电磁学是如此成功，成为了科学毫无争议的代名词，其它学科诸如化学、生物学、心理学、社会学等纷纷效仿，并且由此影响到整个人类文化。世界不再是神秘可知，而是可以被还原为一系列的逻辑序列。宗教衰退，精神的崇高也不再，无神论兴起，人文主义跌到后现代，强科学主义几乎要统一一切。
    

但是，正如前所言，「复杂性」概念的诞生，对以上观念产生了极大冲击，和对科学原有假设的再认识，并由此开启了一个新的研究范式，即超越原有还原论和整体论的「复杂性范式」。
    
    &amp;gt;要想认识复杂，先要认识复杂
    
    「复杂性」这个概念的产生。从背景来说，源自东方观念，即能认识到世界整体，不可分割的一面。但是作为科学而言，依然是从经验现象出发产生的。
    
    我们先看以下几个属于复杂系统的现象。




&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/complex-system-and-mind/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/complex-system-and-mind/</guid>
        
        <category>machine learning</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Use Vim as a Python IDE</title>
        <description>&lt;p&gt;I love vim and often use it to write Python code. Here are some useful plugins and tools for building a delightful vim python environment, escpecially for Vim8:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/vim-python-ide-screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, tmux is also one of my favourite tools in terminal.&lt;/p&gt;

&lt;h3 id=&quot;syntax-checking&quot;&gt;Syntax Checking&lt;/h3&gt;

&lt;p&gt;If you use Vim8, &lt;a href=&quot;https://github.com/w0rp/ale&quot;&gt;w0rp/ale&lt;/a&gt; is a better option than syntastic, for it utilizes the async feature in Vim8, you will never get stuck due to the syntax checking. It’s similar to flycheck in emacs, which allows you to lint while you type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/w0rp/ale/blob/master/img/example.gif?raw=true&quot; alt=&quot;&quot; /&gt;
(taken from ale)&lt;/p&gt;

&lt;h3 id=&quot;code-formatter&quot;&gt;Code Formatter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/yapf&quot;&gt;google/yapf&lt;/a&gt; can be used to format python code. Make a key mapping as bellow, then you can format your python code via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt; =&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; python nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;LocalLeader&lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;$&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;yapf&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also take a look at &lt;a href=&quot;https://github.com/Chiel92/vim-autoformat&quot;&gt;Chiel92/vim-autoformat&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sort-import&quot;&gt;Sort Import&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/timothycrosley/isort&quot;&gt;timothycrosley/isort&lt;/a&gt; helps you sort imports alphabetically, and automatically separated into sections.  For example, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;i&lt;/code&gt; to run isort on your current python file:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; python nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;LocalLeader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;isort %&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or you can use its vim plugin: &lt;a href=&quot;https://github.com/fisadev/vim-isort#installation&quot;&gt;fisadev/vim-isort&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;auto-completion&quot;&gt;Auto Completion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;Valloric/YouCompleteMe&lt;/a&gt; is a good way to provide code auto completion. If you think YCM is too huge to give a try, &lt;a href=&quot;https://github.com/davidhalter/jedi-vim&quot;&gt;jedi-vim&lt;/a&gt; is an alternative. They all use &lt;a href=&quot;https://github.com/davidhalter/jedi&quot;&gt;jedi&lt;/a&gt; as their backend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png&quot; alt=&quot;&quot; /&gt;
(taken from jedi-vim)&lt;/p&gt;

&lt;p&gt;If use neovim, you can also try &lt;a href=&quot;https://github.com/Shougo/deoplete.nvim&quot;&gt;Shougo/deoplete.nvim&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;quick-run&quot;&gt;Quick Run&lt;/h3&gt;

&lt;p&gt;If use Vim8, you can execute python file asynchronously by &lt;a href=&quot;https://github.com/skywind3000/asyncrun.vim&quot;&gt;skywind3000/asyncrun.vim&lt;/a&gt; and output automatically the result to the quickfix window like this:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Quick run via &amp;lt;F5&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;compile_and_run&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

augroup SPACEVIM_ASYNCRUN
    autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Automatically open the quickfix window&lt;/span&gt;
    autocmd &lt;span class=&quot;nb&quot;&gt;User&lt;/span&gt; AsyncRunStart &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; asyncrun#quickfix_toggle&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
augroup END

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:compile_and_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    exec &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;
        exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! gcc % -o %&amp;lt;; time ./%&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cpp'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! g++ -std=c++11 % -o %&amp;lt;; time ./%&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! javac %; time java %&amp;lt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sh'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! time bash %&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'python'&lt;/span&gt;
       exec &lt;span class=&quot;s2&quot;&gt;&quot;AsyncRun! time python %&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For neovim, &lt;a href=&quot;https://github.com/neomake/neomake&quot;&gt;neomake/neomake&lt;/a&gt; is worthy of trying. Here is the description from neomake’s README:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is intended to replace the built-in :make command and provides functionality similar to plugins like syntastic and dispatch.vim. It is primarily used to run code linters and compilers from within Vim, but can be used to run any program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another approach is to use &lt;strong&gt;&lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;TMUX&lt;/a&gt;&lt;/strong&gt;. The idea is simple: it can split your terminal screen into two. Basically, you will have one side of your terminal using Vim and the other side will be where you run your scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/vim-python-ide-tmux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enhance-the-default-python-syntax-highlighting&quot;&gt;Enhance the default python syntax highlighting&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/python-mode/python-mode&quot;&gt;python-mode/python-mode&lt;/a&gt; provides a more precise python syntax highlighting than the defaults. For example, you can add a highlighting for &lt;code class=&quot;highlighter-rouge&quot;&gt;pythonSelf&lt;/code&gt; .&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; pythonSelf  ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;68&lt;/span&gt;  guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#5f87d7&lt;/span&gt; cterm&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more customized python syntax highlightings, please see &lt;a href=&quot;https://github.com/liuchengxu/space-vim/blob/master/layers/%2Blang/python/config.vim#L52-L72&quot;&gt;space-vim: python Layer&lt;/a&gt; and &lt;em&gt;syntax/python.vim&lt;/em&gt; in &lt;a href=&quot;https://github.com/python-mode/python-mode/blob/develop/syntax/python.vim&quot;&gt;python-mode/python-mode&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Actually, python-mode contains tons of stuff to develop python applications in Vim, e.g., static analysis, completion, documentation, and more. (But personally, I prefer to obtain the functionalities by some other better plugins.)&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;There are also some neccessary general programming plugins, e.g., &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;scrooloose/nerdcommenter&lt;/a&gt; for convenient commenter, &lt;a href=&quot;https://github.com/Yggdroot/indentLine&quot;&gt;Yggdroot/indentLine&lt;/a&gt; or &lt;a href=&quot;https://github.com/nathanaelkane/vim-indent-guides&quot;&gt;nathanaelkane/vim-indent-guides&lt;/a&gt; for visually displaying indent levels in Vim, &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;  and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt; for fuzzy file searching, etc.&lt;/p&gt;

&lt;p&gt;Although vim is great and many plugins are productive, IDE is still my first choice when it comes to refactoring code and debugging:). Some useful links for debugging python:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1623039/python-debugging-tips&quot;&gt;python-debugging-tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://keflavich.github.io/blog/my-python-ipython-vim-debugging-workflow.html&quot;&gt;my-python-ipython-vim-debugging-workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For detailed vim configuration, please see &lt;strong&gt;&lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;&lt;/strong&gt;, enable ycmd, syntax-checking, python, programming Layer , then you could get a nice vim environment for python like the screenshot. Hope it helpful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/use-vim-as-a-python-ide/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/use-vim-as-a-python-ide/</guid>
        
        <category>tools</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Switch from spacemacs to vim painlessly</title>
        <description>&lt;p&gt;It’s obvious that I am both a vimmer and spacemacs user (not a spacemacs hacker, yet). I was really amazed by spacemacs’ beautiful GUI and mnemonic keybindings when using it at the first time. Now, I oftern use spacemacs in GUI environment. However, I still prefer vim in terminal, for it’s much faster than emacs, especially when opening some small files.&lt;/p&gt;

&lt;p&gt;Vim is definitely my first choice in terminal, but spacemacs’ beautiful appearance is utterly appealing and its efficient keybindings indeed contribute to help me remember much more key mappings in vim. Hence I write a vim colorscheme &lt;a href=&quot;https://github.com/liuchengxu/space-vim-dark&quot;&gt;space-vim-dark&lt;/a&gt; based on &lt;a href=&quot;https://github.com/nashamri/spacemacs-theme&quot;&gt;spacemacs-theme&lt;/a&gt;. What’s more, I reconfigure my vim configuration based on spacemacs’ priciples, which is &lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot3.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Beautiful interface.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/liuchengxu/space-vim-dark/blob/screenshots/screenshot1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mnenomic keybindings.
  commands have mnemonic prefixes like &lt;code class=&quot;highlighter-rouge&quot;&gt;SPC b&lt;/code&gt; for all the buffer commands.&lt;/p&gt;

    &lt;p&gt;Meanwhile, the whole key bindings have been well adapted for vim for the lack of great plugins similar to which-key in emacs. Most key bindings are limited to no more than two keystrokes without counting &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;&lt;/code&gt; in, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;SPC x d&lt;/code&gt; to delete trailing whitespaces.&lt;/p&gt;

    &lt;p&gt;For different language layers, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;LocalLeader&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; as default in space-vim, can be seen as the major-mode prefix in spacemacs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flexible.&lt;/p&gt;

    &lt;p&gt;I use the similar layer concept to organize the vim configuraitons.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; You can enable the existing layers in space-vim and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; exclude the partial plugins in a certain layer.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; The command Layer and Exlcude are vaild in the function Layers().&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; Layers&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Default layers, recommended!&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'fzf'&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'unite'&lt;/span&gt;
    Layer &lt;span class=&quot;s1&quot;&gt;'better-defaults'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Put your private plugins here, e.g., change the colorscheme.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; UserInit&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Space has been set as the default leader key,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Comma has been set at the default localleader key.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; If you want to change it, uncomment and set it here.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let g:spacevim_leader = &quot;your leader key&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let g:spacevim_localleader = 'your localleader key'&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; Install private plugins&lt;/span&gt;
    Plug &lt;span class=&quot;s1&quot;&gt;'morhetz/gruvbox'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Override the existing configurations and add extras here.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; UserConfig&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; color gruvbox&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I shamelessly steal many elements from &lt;a href=&quot;https://github.com/junegunn/vim-plug/blob/master/plug.vim&quot;&gt;plug.vim&lt;/a&gt; in &lt;a href=&quot;https://github.com/liuchengxu/space-vim/blob/master/core/autoload/core_config.vim&quot;&gt;core_config.vim&lt;/a&gt;, for vim-plug is truely inviting because of its simplicity and clear design. I wish space-vim could be concise as well.&lt;/p&gt;

&lt;p&gt;For more details, please see &lt;a href=&quot;https://github.com/liuchengxu/space-vim&quot;&gt;space-vim&lt;/a&gt;. Hope you like it too.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/space-vim/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/space-vim/</guid>
        
        <category>tools</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Perceptron</title>
        <description>&lt;p&gt;This post will mainly analysis the perceptron alrorithm introcuded in the book &lt;em&gt;Python Machine Leerning&lt;/em&gt;, whose github address is &lt;a href=&quot;https://github.com/rasbt/python-machine-learning-book&quot;&gt;here&lt;/a&gt;. Actually, I will pay much attention to the code analysis step by step, not the theoretical introduction, which is easy to comprehend.&lt;/p&gt;

&lt;p&gt;The perceptron algorithm can be summarized by the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize the weights to 0 or a small random numbers.&lt;/li&gt;
  &lt;li&gt;For each training sample $x^{(i)}$ perform the following steps:
    &lt;ol&gt;
      &lt;li&gt;Compute the output value $\hat{y}$.&lt;/li&gt;
      &lt;li&gt;Update the weights.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/images/02_04.png?raw=true&quot; alt=&quot;perceptron&quot; /&gt;
(图片来自 python-machine-learning)&lt;/p&gt;

&lt;p&gt;感知器算法步骤大致如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将权重初始化为 0 或一个很小的随机数。&lt;/li&gt;
  &lt;li&gt;对于每个训练样本 $x^{(i)}$ 执行下列操作：
    &lt;ol&gt;
      &lt;li&gt;计算输出值 $\hat{y}$ 。&lt;/li&gt;
      &lt;li&gt;更新权重。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里的输出值, 就是由我们预先定义的单位阶跃函数 (unit step function) 所预测得出的类别标签。权重向量 $\mathbf{w}$ 中的每一个权重 $w_j$ 的更新公式为：&lt;/p&gt;

&lt;p&gt;\begin{equation}
w_j := w_j + \Delta w_j
\end{equation}&lt;/p&gt;

&lt;p&gt;$\Delta w_j$ 被用来更新权重 $w_j$ , 其计算公式如下：&lt;/p&gt;

&lt;p&gt;\begin{equation}
\Delta w_j = \eta \left(y^{(i)} - \hat{y}^{(i)}\right)x_j^{(i)}
\end{equation}&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Perceptron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Perceptron classifier.

    Parameters
    ----------
    eta: float
        Learning rate (between 0.0 and 1.0)
    n_iter: int
        Passes over the training dataset.
    Attributes
    ----------
    w_: 1d-array
        Weights after fitting.
    errors_: list
        Number of misclassifications in every epoch.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Fit training data.

        Parameters
        ----------
        X: {array-like}, shape = [n_samples, n_features]
            Training vectors, where n_samples is the number of samples
            and n_features is the number of features.
        y: array-like, shape = [n_samples]
            Target values

        Returns
        -------
        self: object
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# 公式 2 : update = \Delta \mathbf{w}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xi&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Calculate net input&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Return class label after unit step&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/perceptron/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/perceptron/</guid>
        
        <category>machine learning</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Third Maximum Number</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/third-maximum-number/&quot;&gt;414. Third Maximum Number&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).&lt;/p&gt;

&lt;p&gt;The following solutions are all stealed from &lt;a href=&quot;https://discuss.leetcode.com/topic/63903/short-easy-c-using-set&quot;&gt;A short easy cpp solution using set&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;cpp version:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the same idea in java:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TreeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the cpp and java version above is very similar. A person in the discussion presented a question that std::set usually uses red-black tree, so wouldn’t the solution be &lt;em&gt;nlogn&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The answer to the presented problem is since we only have 3 elements, insert/delete is a constant time operation. Don’t stick to O(&lt;em&gt;nlogn&lt;/em&gt;) concept. What’s more, if dive into the problem, we can find the following content about insert operation complexity from &lt;a href=&quot;http://www.cplusplus.com/reference/set/set/insert/&quot;&gt;cplusplus.com&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a single element is inserted, logarithmic in size in general, but amortized constant if a hint is given and the position given is the optimal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see the same idea using python:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thirdMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bisect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am not an expert in python , yet, so the python solution is not so clear and understandable at my first glance. Actually, the reason is that I didn’t know &lt;code class=&quot;highlighter-rouge&quot;&gt;bisect.insort()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The idea could also be used to get the top k items in a large array, whereas you need pay more attention to a certain case:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Input: [2, 2, 3, 1]&lt;/p&gt;

  &lt;p&gt;Output: 1&lt;/p&gt;

  &lt;p&gt;Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If numbers with the same value can not be considered as the same one, the result is unexpected. I did make a mistake here in the past. In Bayesian Personalized Ranking algorithm, I need to obtain the top k items from a list. At that time I used the similar solution, though the final result seemingly looked normal, it was indeed wrong.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/leetcode-414/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/leetcode-414/</guid>
        
        <category>leetcode</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
